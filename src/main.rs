#[macro_use]
mod utils;
mod common;
mod config;
mod endpoints;
mod models;

use axum::{
    http::StatusCode,
    routing::{get, post},
    Router,
};
use mongodb::{bson::doc, options::ClientOptions, Client};
use reqwest::Url;
use starknet::providers::{jsonrpc::HttpTransport, JsonRpcClient};
use std::net::SocketAddr;
use std::sync::Arc;

use crate::utils::{add_leaderboard_table, run_boosts_raffle};
use tower_http::cors::{Any, CorsLayer};

#[tokio::main]
async fn main() {
    println!("quest_server: starting v{}", env!("CARGO_PKG_VERSION"));
    let conf = config::load();
    let client_options = ClientOptions::parse(&conf.database.connection_string)
        .await
        .unwrap();

    let shared_state = Arc::new(models::AppState {
        conf: conf.clone(),
        provider: JsonRpcClient::new(HttpTransport::new(
            Url::parse(&conf.variables.rpc_url).unwrap(),
        )),
        db: Client::with_options(client_options)
            .unwrap()
            .database(&conf.database.name),
    });
    if shared_state
        .db
        .run_command(doc! {"ping": 1}, None)
        .await
        .is_err()
    {
        println!("error: unable to connect to database");
        return;
    } else {
        println!("database: connected");
    }

    let db_instance = shared_state.db.clone();
    run_boosts_raffle(&db_instance, conf.quest_boost.update_interval);
    add_leaderboard_table(&shared_state.db).await;

    let cors = CorsLayer::new().allow_headers(Any).allow_origin(Any);
    let app = Router::new()
        .route("/", get(root))
        .route("/quests/uri", get(endpoints::quests::uri::handler))
        .route(
            "/quests/contract_uri",
            get(endpoints::quests::contract_uri::handler),
        )
        .route("/get_quiz", get(endpoints::get_quiz::handler))
        .route("/get_quest", get(endpoints::get_quest::handler))
        .route("/get_quests", get(endpoints::get_quests::handler))
        .route(
            "/get_completed_quests",
            get(endpoints::get_completed_quests::handler),
        )
        .route(
            "/get_boosted_quests",
            get(endpoints::get_boosted_quests::handler),
        )
        .route(
            "/has_completed_quests",
            get(endpoints::has_completed_quest::handler),
        )
        .route(
            "/get_quest_participants",
            get(endpoints::get_quest_participants::handler),
        )
        .route(
            "/get_trending_quests",
            get(endpoints::get_trending_quests::handler),
        )
        .route("/get_tasks", get(endpoints::get_tasks::handler))
        .route(
            "/get_deployed_time",
            get(endpoints::get_deployed_time::handler),
        )
        .route(
            "/get_quest_category",
            get(endpoints::get_quest_category::handler),
        )
        .route(
            "/quests/verify_quiz",
            post(endpoints::quests::verify_quiz::handler),
        )
        .route(
            "/quests/starknetid/verify_has_domain",
            get(endpoints::quests::starknetid::verify_has_domain::handler),
        )
        .route(
            "/quests/starknetid/verify_twitter_follow",
            get(endpoints::quests::starknetid::verify_twitter_fw::handler),
        )
        .route(
            "/quests/starknetid/verify_has_root_domain",
            get(endpoints::quests::starknetid::verify_has_root_domain::handler),
        )
        .route(
            "/quests/starknetid/verify_socials",
            get(endpoints::quests::starknetid::verify_socials::handler),
        )
        .route(
            "/quests/starknetid/claimable",
            get(endpoints::quests::starknetid::claimable::handler),
        )
        .route(
            "/quests/jediswap/verify_added_liquidity",
            get(endpoints::quests::jediswap::verify_added_liquidity::handler),
        )
        .route(
            "/quests/jediswap/verify_twitter_fw",
            get(endpoints::quests::jediswap::verify_twitter_fw::handler),
        )
        .route(
            "/quests/jediswap/verify_twitter_rt",
            get(endpoints::quests::jediswap::verify_twitter_rt::handler),
        )
        .route(
            "/quests/jediswap/claimable",
            get(endpoints::quests::jediswap::claimable::handler),
        )
        .route(
            "/quests/zklend/verify_borrow",
            get(endpoints::quests::zklend::verify_borrow::handler),
        )
        .route(
            "/quests/zklend/verify_twitter_fw",
            get(endpoints::quests::zklend::verify_twitter_fw::handler),
        )
        .route(
            "/quests/zklend/claimable",
            get(endpoints::quests::zklend::claimable::handler),
        )
        .route(
            "/quests/avnu/discord_fw_callback",
            get(endpoints::quests::avnu::discord_fw_callback::handler),
        )
        .route(
            "/quests/avnu/verify_swap",
            get(endpoints::quests::avnu::verify_swap::handler),
        )
        .route(
            "/quests/avnu/claimable",
            get(endpoints::quests::avnu::claimable::handler),
        )
        .route(
            "/quests/tribe/verify_has_domain",
            get(endpoints::quests::tribe::verify_has_domain::handler),
        )
        .route(
            "/quests/tribe/verify_has_root_domain",
            get(endpoints::quests::tribe::verify_has_root_domain::handler),
        )
        .route(
            "/quests/tribe/verify_three_years_expiry",
            get(endpoints::quests::tribe::verify_three_years_expiry::handler),
        )
        .route(
            "/quests/tribe/claimable",
            get(endpoints::quests::tribe::claimable::handler),
        )
        .route(
            "/quests/sithswap/verify_added_liquidity",
            get(endpoints::quests::sithswap::verify_added_liquidity::handler),
        )
        .route(
            "/quests/sithswap/verify_twitter_fw",
            get(endpoints::quests::sithswap::verify_twitter_fw::handler),
        )
        .route(
            "/quests/sithswap/claimable",
            get(endpoints::quests::sithswap::claimable::handler),
        )
        .route(
            "/quests/orbiter/verify_has_root_domain",
            get(endpoints::quests::orbiter::verify_has_root_domain::handler),
        )
        .route(
            "/quests/orbiter/verify_twitter_fw",
            get(endpoints::quests::orbiter::verify_twitter_fw::handler),
        )
        .route(
            "/quests/orbiter/verify_twitter_fw_sq",
            get(endpoints::quests::orbiter::verify_twitter_fw_sq::handler),
        )
        .route(
            "/quests/orbiter/verify_twitter_rt",
            get(endpoints::quests::orbiter::verify_twitter_rt::handler),
        )
        .route(
            "/quests/orbiter/verify_has_bridged",
            get(endpoints::quests::orbiter::verify_has_bridged::handler),
        )
        .route(
            "/quests/orbiter/claimable",
            get(endpoints::quests::orbiter::claimable::handler),
        )
        .route(
            "/quests/ekubo/claimable",
            get(endpoints::quests::ekubo::claimable::handler),
        )
        .route(
            "/quests/ekubo/discord_fw_callback",
            get(endpoints::quests::ekubo::discord_fw_callback::handler),
        )
        .route(
            "/quests/ekubo/verify_quiz",
            post(endpoints::quests::ekubo::verify_quiz::handler),
        )
        .route(
            "/quests/ekubo/verify_added_liquidity",
            get(endpoints::quests::ekubo::verify_added_liquidity::handler),
        )
        .route(
            "/quests/carmine/claimable",
            get(endpoints::quests::carmine::claimable::handler),
        )
        .route(
            "/quests/morphine/verify_added_liquidity",
            get(endpoints::quests::morphine::verify_added_liquidity::handler),
        )
        .route(
            "/quests/morphine/claimable",
            get(endpoints::quests::morphine::claimable::handler),
        )
        .route(
            "/quests/myswap/verify_added_liquidity",
            get(endpoints::quests::myswap::verify_added_liquidity::handler),
        )
        .route(
            "/quests/myswap/discord_fw_callback",
            get(endpoints::quests::myswap::discord_fw_callback::handler),
        )
        .route(
            "/quests/myswap/claimable",
            get(endpoints::quests::myswap::claimable::handler),
        )
        .route(
            "/quests/starknet/gigabrain/claimable",
            get(endpoints::quests::starknet::gigabrain::claimable::handler),
        )
        .route(
            "/quests/starknet/aa_mastery/claimable",
            get(endpoints::quests::starknet::aa_mastery::claimable::handler),
        )
        .route(
            "/quests/braavos/starknetid/verify_has_domain",
            get(endpoints::quests::braavos::starknetid::verify_has_domain::handler),
        )
        .route(
            "/quests/braavos/starknetid/verify_twitter_fw_braavos",
            get(endpoints::quests::braavos::starknetid::verify_twitter_fw_braavos::handler),
        )
        .route(
            "/quests/braavos/starknetid/verify_twitter_fw_sid",
            get(endpoints::quests::braavos::starknetid::verify_twitter_fw_sid::handler),
        )
        .route(
            "/quests/braavos/starknetid/verify_twitter_fw_sq",
            get(endpoints::quests::braavos::starknetid::verify_twitter_fw_sq::handler),
        )
        .route(
            "/quests/braavos/starknetid/verify_has_mission",
            get(endpoints::quests::braavos::starknetid::verify_has_mission::handler),
        )
        .route(
            "/quests/braavos/starknetid/claimable",
            get(endpoints::quests::braavos::starknetid::claimable::handler),
        )
        .route(
            "/quests/braavos/myswap/claimable",
            get(endpoints::quests::braavos::myswap::claimable::handler),
        )
        .route(
            "/quests/braavos/myswap/verify_has_domain",
            get(endpoints::quests::braavos::myswap::verify_has_domain::handler),
        )
        .route(
            "/quests/braavos/myswap/verify_added_liquidity",
            get(endpoints::quests::braavos::myswap::verify_added_liquidity::handler),
        )
        .route(
            "/quests/braavos/myswap/verify_twitter_fw_braavos",
            get(endpoints::quests::braavos::myswap::verify_twitter_fw_braavos::handler),
        )
        .route(
            "/quests/braavos/myswap/verify_twitter_fw_myswap",
            get(endpoints::quests::braavos::myswap::verify_twitter_fw_myswap::handler),
        )
        .route(
            "/quests/braavos/avnu/claimable",
            get(endpoints::quests::braavos::avnu::claimable::handler),
        )
        .route(
            "/quests/braavos/avnu/verify_has_domain",
            get(endpoints::quests::braavos::avnu::verify_has_domain::handler),
        )
        .route(
            "/quests/braavos/avnu/verify_swap",
            get(endpoints::quests::braavos::avnu::verify_swap::handler),
        )
        .route(
            "/quests/braavos/avnu/verify_twitter_fw_avnu",
            get(endpoints::quests::braavos::avnu::verify_twitter_fw_avnu::handler),
        )
        .route(
            "/quests/braavos/avnu/verify_twitter_fw_braavos",
            get(endpoints::quests::braavos::avnu::verify_twitter_fw_braavos::handler),
        )
        .route(
            "/quests/braavos/avnu/verify_twitter_rt",
            get(endpoints::quests::braavos::avnu::verify_twitter_rt::handler),
        )
        .route(
            "/quests/braavos/wallet/claimable",
            get(endpoints::quests::braavos::wallet::claimable::handler),
        )
        .route(
            "/quests/braavos/wallet/verify_has_domain",
            get(endpoints::quests::braavos::wallet::verify_has_domain::handler),
        )
        .route(
            "/quests/braavos/wallet/verify_twitter_fw_braavos",
            get(endpoints::quests::braavos::wallet::verify_twitter_fw_braavos::handler),
        )
        .route(
            "/quests/braavos/wallet/verify_twitter_rt",
            get(endpoints::quests::braavos::wallet::verify_twitter_rt::handler),
        )
        .route(
            "/quests/braavos/pyramid/verify_has_domain",
            get(endpoints::quests::braavos::pyramid::verify_has_domain::handler),
        )
        .route(
            "/quests/braavos/pyramid/verify_twitter_fw_pyramid",
            get(endpoints::quests::braavos::pyramid::verify_twitter_fw_pyramid::handler),
        )
        .route(
            "/quests/braavos/pyramid/verify_twitter_fw_braavos",
            get(endpoints::quests::braavos::pyramid::verify_twitter_fw_braavos::handler),
        )
        .route(
            "/quests/braavos/pyramid/verify_buy_or_list",
            get(endpoints::quests::braavos::pyramid::verify_buy_or_list::handler),
        )
        .route(
            "/quests/braavos/pyramid/verify_twitter_rt",
            get(endpoints::quests::braavos::pyramid::verify_twitter_rt::handler),
        )
        .route(
            "/quests/braavos/pyramid/claimable",
            get(endpoints::quests::braavos::pyramid::claimable::handler),
        )
        .route(
            "/quests/braavos/zklend/verify_has_domain",
            get(endpoints::quests::braavos::zklend::verify_has_domain::handler),
        )
        .route(
            "/quests/braavos/zklend/verify_twitter_fw_zklend",
            get(endpoints::quests::braavos::zklend::verify_twitter_fw_zklend::handler),
        )
        .route(
            "/quests/braavos/zklend/verify_twitter_fw_braavos",
            get(endpoints::quests::braavos::zklend::verify_twitter_fw_braavos::handler),
        )
        .route(
            "/quests/braavos/zklend/verify_added_liquidity",
            get(endpoints::quests::braavos::zklend::verify_added_liquidity::handler),
        )
        .route(
            "/quests/braavos/zklend/verify_twitter_rt",
            get(endpoints::quests::braavos::zklend::verify_twitter_rt::handler),
        )
        .route(
            "/quests/braavos/zklend/claimable",
            get(endpoints::quests::braavos::zklend::claimable::handler),
        )
        .route(
            "/quests/focustree/verify_twitter_fw",
            get(endpoints::quests::focustree::introduction::verify_twitter_fw::handler),
        )
        .route(
            "/quests/focustree/verify_twitter_rt",
            get(endpoints::quests::focustree::introduction::verify_twitter_rt::handler),
        )
        .route(
            "/quests/focustree/claimable",
            get(endpoints::quests::focustree::introduction::claimable::handler),
        )
        .route(
            "/quests/focustree/discord_fw_callback",
            get(endpoints::quests::focustree::engagement::discord_fw_callback::handler),
        )
        .route(
            "/quests/focustree/verify_twitter_rw_user",
            get(endpoints::quests::focustree::engagement::verify_twitter_rt::handler),
        )
        .route(
            "/quests/element/element/verify_is_eligible",
            get(endpoints::quests::element::element::verify_is_eligible::handler),
        )
        .route(
            "/quests/element/element/verify_twitter_fw",
            get(endpoints::quests::element::element::verify_twitter_fw::handler),
        )
        .route(
            "/quests/element/element/claimable",
            get(endpoints::quests::element::element::claimable::handler),
        )
        .route(
            "/quests/element/briq/verify_own_briq",
            get(endpoints::quests::element::briq::verify_own_briq::handler),
        )
        .route(
            "/quests/element/briq/verify_twitter_fw",
            get(endpoints::quests::element::briq::verify_twitter_fw::handler),
        )
        .route(
            "/quests/element/briq/claimable",
            get(endpoints::quests::element::briq::claimable::handler),
        )
        .route(
            "/quests/element/layerswap/verify_has_bridged",
            get(endpoints::quests::element::layerswap::verify_has_bridged::handler),
        )
        .route(
            "/quests/element/layerswap/verify_twitter_fw",
            get(endpoints::quests::element::layerswap::verify_twitter_fw::handler),
        )
        .route(
            "/quests/element/layerswap/verify_twitter_rt",
            get(endpoints::quests::element::layerswap::verify_twitter_rt::handler),
        )
        .route(
            "/quests/element/layerswap/claimable",
            get(endpoints::quests::element::layerswap::claimable::handler),
        )
        .route(
            "/quests/element/starknetid/verify_has_root_domain",
            get(endpoints::quests::element::starknetid::verify_has_root_domain::handler),
        )
        .route(
            "/quests/element/starknetid/claimable",
            get(endpoints::quests::element::starknetid::claimable::handler),
        )
        .route(
            "/quests/nostra/claimable",
            get(endpoints::quests::nostra::claimable::handler),
        )
        .route(
            "/quests/nostra/discord_fw_callback",
            get(endpoints::quests::nostra::discord_fw_callback::handler),
        )
        .route(
            "/quests/nostra/verify_added_liquidity",
            get(endpoints::quests::nostra::verify_added_liquidity::handler),
        )
        .route(
            "/quests/rhino/check_bridge",
            get(endpoints::quests::rhino::check_bridge::handler),
        )
        .route(
            "/quests/rhino/verify_twitter_fw",
            get(endpoints::quests::rhino::verify_twitter_fw::handler),
        )
        .route(
            "/quests/rhino/verify_twitter_rw",
            get(endpoints::quests::rhino::verify_twitter_rw::handler),
        )
        .route(
            "/quests/rhino/claimable",
            get(endpoints::quests::rhino::claimable::handler),
        )
        .route(
            "/quests/rango/verify_twitter_fw",
            get(endpoints::quests::rango::verify_twitter_fw::handler),
        )
        .route(
            "/quests/rango/discord_fw_callback",
            get(endpoints::quests::rango::discord_fw_callback::handler),
        )
        .route(
            "/quests/rango/check_trade",
            get(endpoints::quests::rango::check_trade::handler),
        )
        .route(
            "/quests/rango/claimable",
            get(endpoints::quests::rango::claimable::handler),
        )
        .route(
            "/quests/brine/verify_twitter_fw",
            get(endpoints::quests::brine::verify_twitter_fw::handler),
        )
        .route(
            "/quests/brine/claimable",
            get(endpoints::quests::brine::claimable::handler),
        )
        .route(
            "/quests/brine/verify_deposit",
            get(endpoints::quests::brine::verify_deposit::handler),
        )
        .route(
            "/quests/brine/verify_trade",
            get(endpoints::quests::brine::verify_trade::handler),
        )
        .route(
            "/achievements/verify_default",
            get(endpoints::achievements::verify_default::handler),
        )
        .route(
            "/achievements/verify_briq",
            get(endpoints::achievements::verify_briq::handler),
        )
        .route(
            "/achievements/verify_tvl",
            get(endpoints::achievements::verify_tvl::handler),
        )
        .route(
            "/achievements/batched/verify_tvl_batched",
            get(endpoints::achievements::batched::verify_tvl_batched::handler),
        )
        .route(
            "/achievements/verify_seniority",
            get(endpoints::achievements::verify_seniority::handler),
        )
        .route(
            "/achievements/verify_avnu",
            get(endpoints::achievements::verify_avnu::handler),
        )
        .route(
            "/achievements/verify_has_domain",
            get(endpoints::achievements::verify_has_domain::handler),
        )
        .route(
            "/achievements/verify_achieved_quests",
            get(endpoints::achievements::verify_achieved_quests::handler),
        )
        .route(
            "/achievements/fetch",
            get(endpoints::achievements::fetch::handler),
        )
        .route(
            "/achievements/fetch_buildings",
            get(endpoints::achievements::fetch_buildings::handler),
        )
        .route(
            "/achievements/verify_quests",
            get(endpoints::achievements::verify_quests::handler),
        )
        .route(
            "/achievements/claim/quest_achievement",
            get(endpoints::achievements::claim::quests_achievement::handler),
        )
        .route(
            "/leaderboard/get_static_info",
            get(endpoints::leaderboard::get_static_info::handler),
        )
        .route(
            "/leaderboard/get_ranking",
            get(endpoints::leaderboard::get_ranking::handler),
        )
        .route(
            "/boost/get_claim_params",
            get(endpoints::quest_boost::get_claim_params::handler),
        )
        .route(
            "/boost/get_boosts",
            get(endpoints::quest_boost::get_boosts::handler),
        )
        .route(
            "/boost/get_completed_boosts",
            get(endpoints::quest_boost::get_completed_boosts::handler),
        )
        .route(
            "/boost/get_quests",
            get(endpoints::quest_boost::get_quests::handler),
        )
        .route(
            "/boost/get_boost",
            get(endpoints::quest_boost::get_boost::handler),
        )
        .route(
            "/boost/get_pending_claims",
            get(endpoints::quest_boost::get_pending_claims::handler),
        )
        .with_state(shared_state)
        .layer(cors);

    let addr = SocketAddr::from(([0, 0, 0, 0], conf.server.port));
    println!("server: listening on http://0.0.0.0:{}", conf.server.port);
    axum::Server::bind(&addr)
        .serve(app.into_make_service_with_connect_info::<SocketAddr>())
        .await
        .unwrap();
}

async fn root() -> (StatusCode, String) {
    (
        StatusCode::ACCEPTED,
        format!("quest_server v{}", env!("CARGO_PKG_VERSION")),
    )
}
